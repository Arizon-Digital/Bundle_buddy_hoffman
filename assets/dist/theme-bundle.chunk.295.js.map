{"version":3,"file":"theme-bundle.chunk.295.js","mappings":"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","sources":["webpack://bigcommerce-cornerstone/./assets/js/theme/common/gift-certificate-validator.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/models/forms.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/nod.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/nod-functions/min-max-validate.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/utils/form-utils.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/utils/translations-utils.js","webpack://bigcommerce-cornerstone/./assets/js/theme/gift-certificate.js"],"sourcesContent":["export default function (cert) {\n    if (typeof cert !== 'string') {\n        return false;\n    }\n\n    // Add any custom gift certificate validation logic here\n    return true;\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import nod from 'nod-validate';\nimport minMaxValidate from './nod-functions/min-max-validate';\n\n// Hook our SCSS framework form field status classes into the nod validation system before use\nnod.classes.errorClass = 'form-field--error';\nnod.classes.successClass = 'form-field--success';\nnod.classes.errorMessageClass = 'form-inlineMessage';\n\n// Register validate functions\nnod.checkFunctions['min-max'] = minMaxValidate;\n\nexport default nod;\n","import _ from 'lodash';\n\nfunction minMaxValidate(minInputSelector, maxInputSelector) {\n    function validate(cb) {\n        const minValue = parseFloat($(minInputSelector).val());\n        const maxValue = parseFloat($(maxInputSelector).val());\n\n        if (maxValue > minValue || _.isNaN(maxValue) || _.isNaN(minValue)) {\n            return cb(true);\n        }\n\n        return cb(false);\n    }\n\n    return validate;\n}\n\nexport default minMaxValidate;\n","import _ from 'lodash';\nimport nod from '../nod';\nimport forms from '../models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n/**\n * Set up Object with Error Messages on Password Validation. Please use messages in mentioned order\n * @param {string} empty defines error text for empty field\n * @param {string} confirm defines error text for empty confirmation field\n * @param {string} mismatch defines error text if confirm passford mismatches passford field\n * @param {string} invalid defines error text for invalid password charaters sequence\n * @return {object} messages or default texts if nothing is providing\n */\nexport const createPasswordValidationErrorTextObject = (empty, confirm, mismatch, invalid) => ({\n    onEmptyPasswordErrorText: empty,\n    onConfirmPasswordErrorText: confirm,\n    onMismatchPasswordErrorText: mismatch,\n    onNotValidPasswordErrorText: invalid,\n});\n\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\n/**\n * Announce form input error message by screen reader\n * @param {params.element} dom input element where checking is happened\n * @param {params.result} result of validation check\n */\nfunction announceInputErrorMessage({ element, result }) {\n    if (result) {\n        return;\n    }\n    const activeInputContainer = $(element).parent();\n    // the reason for using span tag is nod-validate lib\n    // which does not add error message class while initialising form\n    const errorMessage = $(activeInputContainer).find('span');\n\n    if (errorMessage.length) {\n        const $errMessage = $(errorMessage[0]);\n\n        if (!$errMessage.attr('role')) {\n            $errMessage.attr('role', 'alert');\n        }\n    }\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     * @param {string} errorText describes errorMassage on email validation\n     */\n    setEmailValidation: (validator, field, errorText) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: errorText,\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param {object} errorTextsObject\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, {\n        onEmptyPasswordErrorText, onConfirmPasswordErrorText, onMismatchPasswordErrorText, onNotValidPasswordErrorText,\n    }, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onEmptyPasswordErrorText,\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onNotValidPasswordErrorText,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onConfirmPasswordErrorText,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: onMismatchPasswordErrorText,\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors, priceValidationErrorTexts = {}) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        // eslint-disable-next-line object-curly-newline\n        const { onMinPriceError, onMaxPriceError, minPriceNotEntered, maxPriceNotEntered, onInvalidPrice } = priceValidationErrorTexts;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: onMinPriceError,\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: onMaxPriceError,\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: maxPriceNotEntered,\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: minPriceNotEntered,\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: onInvalidPrice,\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field, errorText) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: errorText,\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField, announceInputErrorMessage };\n","const TRANSLATIONS = 'translations';\nconst isTranslationDictionaryNotEmpty = (dictionary) => !!Object.keys(dictionary[TRANSLATIONS]).length;\nconst chooseActiveDictionary = (...dictionaryJsonList) => {\n    for (let i = 0; i < dictionaryJsonList.length; i++) {\n        const dictionary = JSON.parse(dictionaryJsonList[i]);\n        if (isTranslationDictionaryNotEmpty(dictionary)) {\n            return dictionary;\n        }\n    }\n};\n\n/**\n * defines Translation Dictionary to use\n * @param context provides access to 3 validation JSONs from en.json:\n * validation_messages, validation_fallback_messages and default_messages\n * @returns {Object}\n */\nexport const createTranslationDictionary = (context) => {\n    const { validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON } = context;\n    const activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);\n    const localizations = Object.values(activeDictionary[TRANSLATIONS]);\n    const translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(key => key.split('.').pop());\n\n    return translationKeys.reduce((acc, key, i) => {\n        acc[key] = localizations[i];\n        return acc;\n    }, {});\n};\n","import PageManager from './page-manager';\nimport nod from './common/nod';\nimport giftCertChecker from './common/gift-certificate-validator';\nimport formModel from './common/models/forms';\nimport { createTranslationDictionary } from './common/utils/translations-utils';\nimport { announceInputErrorMessage } from './common/utils/form-utils';\nimport { api } from '@bigcommerce/stencil-utils';\nimport { defaultModal } from './global/modal';\n\nexport default class GiftCertificate extends PageManager {\n    constructor(context) {\n        super(context);\n        this.validationDictionary = createTranslationDictionary(context);\n\n        const $certBalanceForm = $('#gift-certificate-balance');\n\n        const purchaseModel = {\n            recipientName(val) {\n                return val.length;\n            },\n            recipientEmail(...args) {\n                return formModel.email(...args);\n            },\n            senderName(val) {\n                return val.length;\n            },\n            senderEmail(...args) {\n                return formModel.email(...args);\n            },\n            customAmount(value, min, max) {\n                return value && value >= min && value <= max;\n            },\n            setAmount(value, options) {\n                let found = false;\n\n                options.forEach((option) => {\n                    if (option === value) {\n                        found = true;\n                        return false;\n                    }\n                });\n\n                return found;\n            },\n        };\n\n        const $purchaseForm = $('#gift-certificate-form');\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\n        const purchaseValidator = nod({\n            submit: '#gift-certificate-form input[type=\"submit\"]',\n            delay: 300,\n            tap: announceInputErrorMessage,\n        });\n\n        if ($customAmounts.length) {\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\n            const min = $element.data('min');\n            const minFormatted = $element.data('minFormatted');\n            const max = $element.data('max');\n            const maxFormatted = $element.data('maxFormatted');\n            const insertFormattedAmountsIntoErrorMessage = (message, ...amountRange) => {\n                const amountPlaceholders = ['[MIN]', '[MAX]'];\n                let updatedErrorText = message;\n                amountPlaceholders.forEach((placeholder, i) => {\n                    updatedErrorText = updatedErrorText.includes(placeholder) ?\n                        updatedErrorText.replace(placeholder, amountRange[i]) :\n                        updatedErrorText;\n                });\n                return updatedErrorText;\n            };\n\n            purchaseValidator.add({\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\n                validate: (cb, val) => {\n                    const numberVal = Number(val);\n\n                    if (!numberVal) {\n                        cb(false);\n                    }\n\n                    cb(numberVal >= min && numberVal <= max);\n                },\n                errorMessage: insertFormattedAmountsIntoErrorMessage(this.validationDictionary.certificate_amount_range, minFormatted, maxFormatted),\n            });\n        }\n\n        purchaseValidator.add([\n            {\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\n\n                    cb(typeof (val) === 'string');\n                },\n                errorMessage: this.context.certTheme,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n        ]);\n\n        if ($certBalanceForm.length) {\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\n\n            $certBalanceForm.on('submit', () => {\n                balanceVal.performCheck();\n\n                if (!balanceVal.areAll('valid')) {\n                    return false;\n                }\n            });\n        }\n\n        $purchaseForm.on('submit', event => {\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return event.preventDefault();\n            }\n        });\n\n        $('#gift-certificate-preview').click(event => {\n            event.preventDefault();\n\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return;\n            }\n\n            const modal = defaultModal();\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\n\n            modal.open();\n\n            api.getPage(previewUrl, {}, (err, content) => {\n                if (err) {\n                    return modal.updateContent(this.context.previewError);\n                }\n\n                modal.updateContent(content, { wrap: true });\n            });\n        });\n    }\n\n    checkCertBalanceValidator($balanceForm) {\n        const balanceValidator = nod({\n            submit: $balanceForm.find('input[type=\"submit\"]'),\n            tap: announceInputErrorMessage,\n        });\n\n        balanceValidator.add({\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\n            validate(cb, val) {\n                cb(giftCertChecker(val));\n            },\n            errorMessage: 'You must enter a certificate code.',\n        });\n\n        return balanceValidator;\n    }\n}\n"],"names":["cert","email","value","test","password","this","notEmpty","length","nod","errorClass","successClass","errorMessageClass","minInputSelector","maxInputSelector","cb","minValue","parseFloat","$","val","maxValue","_isNaN","inputTagNames","createPasswordValidationErrorTextObject","empty","confirm","mismatch","invalid","onEmptyPasswordErrorText","onConfirmPasswordErrorText","onMismatchPasswordErrorText","onNotValidPasswordErrorText","classifyForm","formSelector","options","$form","$inputs","find","join","_options$formFieldCla","formFieldClass","each","__","input","specificClassName","$input","$formField","parent","tagName","prop","toLowerCase","className","inputType","_includes","_camelCase","_capitalize","addClass","classifyInput","insertStateHiddenField","$stateField","$field","fieldId","stateFieldAttrs","type","name","match","after","announceInputErrorMessage","_ref","element","result","activeInputContainer","errorMessage","$errMessage","attr","Validators","setEmailValidation","validator","field","errorText","add","selector","validate","forms","setPasswordValidation","passwordSelector","password2Selector","requirements","_ref2","isOptional","$password","passwordValidations","RegExp","alpha","numeric","minlength","setMinMaxPriceValidation","selectors","priceValidationErrorTexts","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","_priceValidationError","onMinPriceError","onMaxPriceError","minPriceNotEntered","maxPriceNotEntered","onInvalidPrice","configure","form","preventSubmit","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","data","Object","keys","classes","forEach","hasClass","removeClass","TRANSLATIONS","isTranslationDictionaryNotEmpty","dictionary","createTranslationDictionary","context","activeDictionary","i","arguments","JSON","parse","undefined","chooseActiveDictionary","validationDictionaryJSON","validationFallbackDictionaryJSON","validationDefaultDictionaryJSON","localizations","values","map","key","split","pop","reduce","acc","GiftCertificate","_PageManager","_this","call","validationDictionary","$certBalanceForm","$purchaseForm","$customAmounts","purchaseValidator","submit","delay","tap","$element","min","minFormatted","max","maxFormatted","numberVal","Number","message","_len","amountRange","Array","_key","updatedErrorText","placeholder","includes","replace","insertFormattedAmountsIntoErrorMessage","certificate_amount_range","purchaseModel","toName","formModel","apply","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","wrap","prototype","$balanceForm","balanceValidator","giftCertChecker","PageManager"],"sourceRoot":""}