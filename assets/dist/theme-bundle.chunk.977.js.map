{"version":3,"file":"theme-bundle.chunk.977.js","mappings":"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","sources":["webpack://bigcommerce-cornerstone/./assets/js/theme/common/form-validation.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/models/forms.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/nod.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/nod-functions/min-max-validate.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/state-country.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/utils/form-utils.js","webpack://bigcommerce-cornerstone/./assets/js/theme/common/utils/translations-utils.js"],"sourcesContent":["import { createTranslationDictionary } from './utils/translations-utils';\n\n/**\n * Validate that the given date for the day/month/year select inputs is within potential range\n * @param $formField\n * @param validation\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\n */\nfunction buildDateValidation($formField, validation) {\n    // No date range restriction, skip\n    if (validation.min_date && validation.max_date) {\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\n        const formElementId = $formField.attr('id');\n        const minSplit = validation.min_date.split('-');\n        const maxSplit = validation.max_date.split('-');\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\n\n        return {\n            selector: `#${formElementId} select[data-label=\"year\"]`,\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\n            validate: (cb, val) => {\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\n                const year = Number(val);\n                const chosenDate = new Date(year, month, day);\n\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\n            },\n            errorMessage: invalidMessage,\n        };\n    }\n}\n\n/**\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\n * from many different inputs\n * @param $formField\n * @param validation\n * @param errorText provides error validation message\n */\nfunction buildRequiredCheckboxValidation(validation, $formField, errorText) {\n    const formFieldId = $formField.attr('id');\n    const primarySelector = `#${formFieldId} input:first-of-type`;\n    const secondarySelector = `#${formFieldId} input`;\n\n    return {\n        selector: primarySelector,\n        triggeredBy: secondarySelector,\n        validate: (cb) => {\n            let result = false;\n\n            $(secondarySelector).each((index, checkbox) => {\n                if (checkbox.checked) {\n                    result = true;\n\n                    return false;\n                }\n            });\n\n            cb(result);\n        },\n        errorMessage: errorText,\n    };\n}\n\nfunction buildRequiredValidation(validation, selector, errorText) {\n    return {\n        selector,\n        validate(cb, val) {\n            cb(val.length > 0);\n        },\n        errorMessage: errorText,\n    };\n}\n\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\n    const min = Number(validation.min);\n    const max = Number(validation.max);\n\n    return {\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\n        validate: (cb, val) => {\n            const numberVal = Number(val);\n\n            cb(numberVal >= min && numberVal <= max);\n        },\n        errorMessage: invalidMessage,\n    };\n}\n\n\nfunction buildValidation($validateableElement, errorMessage) {\n    const validation = $validateableElement.data('validation');\n    const fieldValidations = [];\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\n\n    if (validation.type === 'datechooser') {\n        const dateValidation = buildDateValidation($validateableElement, validation);\n\n        if (dateValidation) {\n            fieldValidations.push(dateValidation);\n        }\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\n        fieldValidations.push(buildRequiredCheckboxValidation(validation, $validateableElement, errorMessage));\n    } else {\n        $validateableElement.find('input, select, textarea').each((index, element) => {\n            const $inputElement = $(element);\n            const tagName = $inputElement.get(0).tagName;\n            const inputName = $inputElement.attr('name');\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\n\n            if (validation.type === 'numberonly') {\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\n            }\n            if (validation.required) {\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector, errorMessage));\n            }\n        });\n    }\n\n    return fieldValidations;\n}\n\n/**\n * Builds the validation model for dynamic forms\n * @param $form\n * @param context provides access for error messages on required fields validation\n * @returns {Array}\n */\nexport default function ($form, context) {\n    let validationsToPerform = [];\n    const { field_not_blank: requiredFieldValidationText } = createTranslationDictionary(context);\n\n    $form.find('[data-validation]').each((index, input) => {\n        const getLabel = $el => $el.first().data('validation').label;\n        const requiredValidationMessage = getLabel($(input)) + requiredFieldValidationText;\n\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input), requiredValidationMessage));\n    });\n\n    return validationsToPerform;\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import nod from 'nod-validate';\nimport minMaxValidate from './nod-functions/min-max-validate';\n\n// Hook our SCSS framework form field status classes into the nod validation system before use\nnod.classes.errorClass = 'form-field--error';\nnod.classes.successClass = 'form-field--success';\nnod.classes.errorMessageClass = 'form-inlineMessage';\n\n// Register validate functions\nnod.checkFunctions['min-max'] = minMaxValidate;\n\nexport default nod;\n","import _ from 'lodash';\n\nfunction minMaxValidate(minInputSelector, maxInputSelector) {\n    function validate(cb) {\n        const minValue = parseFloat($(minInputSelector).val());\n        const maxValue = parseFloat($(maxInputSelector).val());\n\n        if (maxValue > minValue || _.isNaN(maxValue) || _.isNaN(minValue)) {\n            return cb(true);\n        }\n\n        return cb(false);\n    }\n\n    return validate;\n}\n\nexport default minMaxValidate;\n","import utils from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport { insertStateHiddenField } from './utils/form-utils';\nimport { showAlertModal } from '../global/modal';\n\n/**\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\n * @returns {jQuery|HTMLElement}\n */\nfunction makeStateRequired(stateElement, context) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n        return ret;\n    });\n\n    const replacementAttributes = {\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-select',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\n\n    if ($hiddenInput.length !== 0) {\n        $hiddenInput.remove();\n    }\n\n    if ($newElement.prev().find('small').length === 0) {\n        // String is injected from localizer\n        $newElement.prev().append(`<small>${context.required}</small>`);\n    } else {\n        $newElement.prev().find('small').show();\n    }\n\n    return $newElement;\n}\n\n/**\n * If a country with states is the default, a select will be sent,\n * In this case we need to be able to switch to an input field and hide the required field\n */\nfunction makeStateOptional(stateElement) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n\n        return ret;\n    });\n\n    const replacementAttributes = {\n        type: 'text',\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-input',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<input />', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n\n    if ($newElement.length !== 0) {\n        insertStateHiddenField($newElement);\n        $newElement.prev().find('small').hide();\n    }\n\n    return $newElement;\n}\n\n/**\n * Adds the array of options from the remote request to the newly created select box.\n * @param {Object} statesArray\n * @param {jQuery} $selectElement\n * @param {Object} options\n */\nfunction addOptions(statesArray, $selectElement, options) {\n    const container = [];\n\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\n\n    if (!_.isEmpty($selectElement)) {\n        _.each(statesArray.states, (stateObj) => {\n            if (options.useIdForStates) {\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\n            } else {\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\n            }\n        });\n\n        $selectElement.html(container.join(' '));\n    }\n}\n\n/**\n *\n * @param {jQuery} stateElement\n * @param {Object} context\n * @param {Object} options\n * @param {Function} callback\n */\nexport default function (stateElement, context = {}, options, callback) {\n    /**\n     * Backwards compatible for three parameters instead of four\n     *\n     * Available options:\n     *\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\n     */\n    if (typeof options === 'function') {\n        /* eslint-disable no-param-reassign */\n        callback = options;\n        options = {};\n        /* eslint-enable no-param-reassign */\n    }\n\n    $('select[data-field-type=\"Country\"]').on('change', event => {\n        const countryName = $(event.currentTarget).val();\n\n        if (countryName === '') {\n            return;\n        }\n\n        utils.api.country.getByName(countryName, (err, response) => {\n            if (err) {\n                showAlertModal(context.state_error);\n                return callback(err);\n            }\n\n            const $currentInput = $('[data-field-type=\"State\"]');\n\n            if (!_.isEmpty(response.data.states)) {\n                // The element may have been replaced with a select, reselect it\n                const $selectElement = makeStateRequired($currentInput, context);\n\n                addOptions(response.data, $selectElement, options);\n                callback(null, $selectElement);\n            } else {\n                const newElement = makeStateOptional($currentInput, context);\n\n                callback(null, newElement);\n            }\n        });\n    });\n}\n","import _ from 'lodash';\nimport nod from '../nod';\nimport forms from '../models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n/**\n * Set up Object with Error Messages on Password Validation. Please use messages in mentioned order\n * @param {string} empty defines error text for empty field\n * @param {string} confirm defines error text for empty confirmation field\n * @param {string} mismatch defines error text if confirm passford mismatches passford field\n * @param {string} invalid defines error text for invalid password charaters sequence\n * @return {object} messages or default texts if nothing is providing\n */\nexport const createPasswordValidationErrorTextObject = (empty, confirm, mismatch, invalid) => ({\n    onEmptyPasswordErrorText: empty,\n    onConfirmPasswordErrorText: confirm,\n    onMismatchPasswordErrorText: mismatch,\n    onNotValidPasswordErrorText: invalid,\n});\n\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\n/**\n * Announce form input error message by screen reader\n * @param {params.element} dom input element where checking is happened\n * @param {params.result} result of validation check\n */\nfunction announceInputErrorMessage({ element, result }) {\n    if (result) {\n        return;\n    }\n    const activeInputContainer = $(element).parent();\n    // the reason for using span tag is nod-validate lib\n    // which does not add error message class while initialising form\n    const errorMessage = $(activeInputContainer).find('span');\n\n    if (errorMessage.length) {\n        const $errMessage = $(errorMessage[0]);\n\n        if (!$errMessage.attr('role')) {\n            $errMessage.attr('role', 'alert');\n        }\n    }\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     * @param {string} errorText describes errorMassage on email validation\n     */\n    setEmailValidation: (validator, field, errorText) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: errorText,\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param {object} errorTextsObject\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, {\n        onEmptyPasswordErrorText, onConfirmPasswordErrorText, onMismatchPasswordErrorText, onNotValidPasswordErrorText,\n    }, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onEmptyPasswordErrorText,\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onNotValidPasswordErrorText,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: onConfirmPasswordErrorText,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: onMismatchPasswordErrorText,\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors, priceValidationErrorTexts = {}) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        // eslint-disable-next-line object-curly-newline\n        const { onMinPriceError, onMaxPriceError, minPriceNotEntered, maxPriceNotEntered, onInvalidPrice } = priceValidationErrorTexts;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: onMinPriceError,\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: onMaxPriceError,\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: maxPriceNotEntered,\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: minPriceNotEntered,\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: onInvalidPrice,\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field, errorText) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: errorText,\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField, announceInputErrorMessage };\n","const TRANSLATIONS = 'translations';\nconst isTranslationDictionaryNotEmpty = (dictionary) => !!Object.keys(dictionary[TRANSLATIONS]).length;\nconst chooseActiveDictionary = (...dictionaryJsonList) => {\n    for (let i = 0; i < dictionaryJsonList.length; i++) {\n        const dictionary = JSON.parse(dictionaryJsonList[i]);\n        if (isTranslationDictionaryNotEmpty(dictionary)) {\n            return dictionary;\n        }\n    }\n};\n\n/**\n * defines Translation Dictionary to use\n * @param context provides access to 3 validation JSONs from en.json:\n * validation_messages, validation_fallback_messages and default_messages\n * @returns {Object}\n */\nexport const createTranslationDictionary = (context) => {\n    const { validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON } = context;\n    const activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);\n    const localizations = Object.values(activeDictionary[TRANSLATIONS]);\n    const translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(key => key.split('.').pop());\n\n    return translationKeys.reduce((acc, key, i) => {\n        acc[key] = localizations[i];\n        return acc;\n    }, {});\n};\n"],"names":["$form","context","validationsToPerform","requiredFieldValidationText","createTranslationDictionary","field_not_blank","find","each","index","input","requiredValidationMessage","$","first","data","label","concat","$validateableElement","errorMessage","errorText","formFieldId","secondarySelector","validation","fieldValidations","formFieldSelector","attr","type","dateValidation","$formField","min_date","max_date","invalidMessage","formElementId","minSplit","split","maxSplit","minDate","Date","maxDate","selector","triggeredBy","validate","cb","val","day","Number","month","year","chosenDate","buildDateValidation","push","required","element","$inputElement","tagName","get","inputName","elementSelector","min","max","name","numberVal","buildNumberRangeValidation","length","buildRequiredValidation","result","checkbox","checked","buildValidation","email","value","test","password","this","notEmpty","nod","errorClass","successClass","errorMessageClass","minInputSelector","maxInputSelector","minValue","parseFloat","maxValue","_isNaN","stateElement","options","callback","on","event","countryName","currentTarget","utils","country","getByName","err","response","showAlertModal","state_error","$currentInput","_isEmpty","states","newElement","attrs","_transform","prop","item","ret","replacementAttributes","id","class","replaceWith","$newElement","insertStateHiddenField","prev","hide","makeStateOptional","$selectElement","$hiddenInput","remove","append","show","makeStateRequired","statesArray","container","prefix","_each","stateObj","useIdForStates","html","join","addOptions","inputTagNames","createPasswordValidationErrorTextObject","empty","confirm","mismatch","invalid","onEmptyPasswordErrorText","onConfirmPasswordErrorText","onMismatchPasswordErrorText","onNotValidPasswordErrorText","classifyForm","formSelector","$inputs","_options$formFieldCla","formFieldClass","__","specificClassName","$input","parent","toLowerCase","className","inputType","_includes","_camelCase","_capitalize","addClass","classifyInput","$stateField","$field","fieldId","stateFieldAttrs","match","after","announceInputErrorMessage","_ref","activeInputContainer","$errMessage","Validators","setEmailValidation","validator","field","add","forms","setPasswordValidation","passwordSelector","password2Selector","requirements","_ref2","isOptional","$password","passwordValidations","RegExp","alpha","numeric","minlength","setMinMaxPriceValidation","selectors","priceValidationErrorTexts","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","_priceValidationError","onMinPriceError","onMaxPriceError","minPriceNotEntered","maxPriceNotEntered","onInvalidPrice","configure","form","preventSubmit","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","Object","keys","classes","forEach","hasClass","removeClass","TRANSLATIONS","isTranslationDictionaryNotEmpty","dictionary","activeDictionary","i","arguments","JSON","parse","undefined","chooseActiveDictionary","validationDictionaryJSON","validationFallbackDictionaryJSON","validationDefaultDictionaryJSON","localizations","values","map","key","pop","reduce","acc"],"sourceRoot":""}